// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/br4tech/auth-nex/internal/core/port"
	"github.com/br4tech/auth-nex/internal/core/usecase/auth"
	"github.com/br4tech/auth-nex/internal/core/usecase/company"
	"github.com/br4tech/auth-nex/internal/core/usecase/tenant"
	"github.com/br4tech/auth-nex/internal/handler"
	"github.com/br4tech/auth-nex/internal/repository"
)

// Injectors from wire.go:

func InitializeUserHandler(db port.IDatabase) port.IUserHandler {
	iUserRepository := repository.NewUserRepository(db)
	iUserUseCase := auth.NewAuthUseCase(iUserRepository)
	userHandler := handler.NewUserHandler(iUserUseCase)
	return userHandler
}

func InitializeTenantHandler(db port.IDatabase) port.ITenantHandler {
	iTenantRepository := repository.NewTenantRepository(db)
	iCompanyRepository := repository.NewCompanyRepository(db)
	iCompanyUseCase := company.NewCompanyUseCase(iCompanyRepository)
	iUserRepository := repository.NewUserRepository(db)
	iUserUseCase := auth.NewAuthUseCase(iUserRepository)
	iTenantUseCase := tenant.NewTenantUseCase(iTenantRepository, iCompanyUseCase, iUserUseCase)
	tenantHandler := handler.NewTenantHandler(iTenantUseCase)
	return tenantHandler
}
