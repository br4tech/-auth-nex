// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/database.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	port "github.com/br4tech/auth-nex/internal/core/port"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase[T port.IModel] struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder[T]
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder[T port.IModel] struct {
	mock *MockIDatabase[T]
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase[T port.IModel](ctrl *gomock.Controller) *MockIDatabase[T] {
	mock := &MockIDatabase[T]{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase[T]) EXPECT() *MockIDatabaseMockRecorder[T] {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDatabase[T]) Create(entity T) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIDatabaseMockRecorder[T]) Create(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDatabase[T])(nil).Create), entity)
}

// FindAll mocks base method.
func (m *MockIDatabase[T]) FindAll() ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIDatabaseMockRecorder[T]) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIDatabase[T])(nil).FindAll))
}

// FindBy mocks base method.
func (m *MockIDatabase[T]) FindBy(field, value string) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", field, value)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockIDatabaseMockRecorder[T]) FindBy(field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockIDatabase[T])(nil).FindBy), field, value)
}

// FindById mocks base method.
func (m *MockIDatabase[T]) FindById(id int) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIDatabaseMockRecorder[T]) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIDatabase[T])(nil).FindById), id)
}

// GetDb mocks base method.
func (m *MockIDatabase[T]) GetDb() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDb")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDb indicates an expected call of GetDb.
func (mr *MockIDatabaseMockRecorder[T]) GetDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDb", reflect.TypeOf((*MockIDatabase[T])(nil).GetDb))
}

// MockIModel is a mock of IModel interface.
type MockIModel struct {
	ctrl     *gomock.Controller
	recorder *MockIModelMockRecorder
}

// MockIModelMockRecorder is the mock recorder for MockIModel.
type MockIModelMockRecorder struct {
	mock *MockIModel
}

// NewMockIModel creates a new mock instance.
func NewMockIModel(ctrl *gomock.Controller) *MockIModel {
	mock := &MockIModel{ctrl: ctrl}
	mock.recorder = &MockIModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIModel) EXPECT() *MockIModelMockRecorder {
	return m.recorder
}

// GetId mocks base method.
func (m *MockIModel) GetId() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockIModelMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockIModel)(nil).GetId))
}
