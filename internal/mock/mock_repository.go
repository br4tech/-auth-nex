// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/br4tech/auth-nex/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIPermissionRepository is a mock of IPermissionRepository interface.
type MockIPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPermissionRepositoryMockRecorder
}

// MockIPermissionRepositoryMockRecorder is the mock recorder for MockIPermissionRepository.
type MockIPermissionRepositoryMockRecorder struct {
	mock *MockIPermissionRepository
}

// NewMockIPermissionRepository creates a new mock instance.
func NewMockIPermissionRepository(ctrl *gomock.Controller) *MockIPermissionRepository {
	mock := &MockIPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockIPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPermissionRepository) EXPECT() *MockIPermissionRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockIPermissionRepository) CreateProfile(role *domain.Profile) (*domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", role)
	ret0, _ := ret[0].(*domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockIPermissionRepositoryMockRecorder) CreateProfile(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIPermissionRepository)(nil).CreateProfile), role)
}

// FindProfileByName mocks base method.
func (m *MockIPermissionRepository) FindProfileByName(name string) (*domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProfileByName", name)
	ret0, _ := ret[0].(*domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProfileByName indicates an expected call of FindProfileByName.
func (mr *MockIPermissionRepositoryMockRecorder) FindProfileByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProfileByName", reflect.TypeOf((*MockIPermissionRepository)(nil).FindProfileByName), name)
}

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), user)
}

// FindByPhone mocks base method.
func (m *MockIUserRepository) FindByPhone(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockIUserRepositoryMockRecorder) FindByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockIUserRepository)(nil).FindByPhone), phone)
}

// FindUserByEmail mocks base method.
func (m *MockIUserRepository) FindUserByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).FindUserByEmail), email)
}

// MockICompanyRepository is a mock of ICompanyRepository interface.
type MockICompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompanyRepositoryMockRecorder
}

// MockICompanyRepositoryMockRecorder is the mock recorder for MockICompanyRepository.
type MockICompanyRepositoryMockRecorder struct {
	mock *MockICompanyRepository
}

// NewMockICompanyRepository creates a new mock instance.
func NewMockICompanyRepository(ctrl *gomock.Controller) *MockICompanyRepository {
	mock := &MockICompanyRepository{ctrl: ctrl}
	mock.recorder = &MockICompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICompanyRepository) EXPECT() *MockICompanyRepositoryMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockICompanyRepository) CreateCompany(company *domain.Company) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", company)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockICompanyRepositoryMockRecorder) CreateCompany(company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockICompanyRepository)(nil).CreateCompany), company)
}

// FindCompanyById mocks base method.
func (m *MockICompanyRepository) FindCompanyById(id int) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompanyById", id)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompanyById indicates an expected call of FindCompanyById.
func (mr *MockICompanyRepositoryMockRecorder) FindCompanyById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompanyById", reflect.TypeOf((*MockICompanyRepository)(nil).FindCompanyById), id)
}

// MockITenantRepository is a mock of ITenantRepository interface.
type MockITenantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITenantRepositoryMockRecorder
}

// MockITenantRepositoryMockRecorder is the mock recorder for MockITenantRepository.
type MockITenantRepositoryMockRecorder struct {
	mock *MockITenantRepository
}

// NewMockITenantRepository creates a new mock instance.
func NewMockITenantRepository(ctrl *gomock.Controller) *MockITenantRepository {
	mock := &MockITenantRepository{ctrl: ctrl}
	mock.recorder = &MockITenantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITenantRepository) EXPECT() *MockITenantRepositoryMockRecorder {
	return m.recorder
}

// CreateTenant mocks base method.
func (m *MockITenantRepository) CreateTenant(tenant *domain.Tenant) (*domain.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", tenant)
	ret0, _ := ret[0].(*domain.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockITenantRepositoryMockRecorder) CreateTenant(tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockITenantRepository)(nil).CreateTenant), tenant)
}

// FindTenantByName mocks base method.
func (m *MockITenantRepository) FindTenantByName(name string) (*domain.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTenantByName", name)
	ret0, _ := ret[0].(*domain.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTenantByName indicates an expected call of FindTenantByName.
func (mr *MockITenantRepositoryMockRecorder) FindTenantByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTenantByName", reflect.TypeOf((*MockITenantRepository)(nil).FindTenantByName), name)
}
