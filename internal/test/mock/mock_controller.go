// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/controller.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserHandler is a mock of IUserHandler interface.
type MockIUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIUserHandlerMockRecorder
}

// MockIUserHandlerMockRecorder is the mock recorder for MockIUserHandler.
type MockIUserHandlerMockRecorder struct {
	mock *MockIUserHandler
}

// NewMockIUserHandler creates a new mock instance.
func NewMockIUserHandler(ctrl *gomock.Controller) *MockIUserHandler {
	mock := &MockIUserHandler{ctrl: ctrl}
	mock.recorder = &MockIUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserHandler) EXPECT() *MockIUserHandlerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserHandler) CreateUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserHandlerMockRecorder) CreateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserHandler)(nil).CreateUser), c)
}

// GenerateToken mocks base method.
func (m *MockIUserHandler) GenerateToken(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIUserHandlerMockRecorder) GenerateToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIUserHandler)(nil).GenerateToken), c)
}

// ValidateAccessToken mocks base method.
func (m *MockIUserHandler) ValidateAccessToken(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockIUserHandlerMockRecorder) ValidateAccessToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockIUserHandler)(nil).ValidateAccessToken), c)
}

// MockITenantHandler is a mock of ITenantHandler interface.
type MockITenantHandler struct {
	ctrl     *gomock.Controller
	recorder *MockITenantHandlerMockRecorder
}

// MockITenantHandlerMockRecorder is the mock recorder for MockITenantHandler.
type MockITenantHandlerMockRecorder struct {
	mock *MockITenantHandler
}

// NewMockITenantHandler creates a new mock instance.
func NewMockITenantHandler(ctrl *gomock.Controller) *MockITenantHandler {
	mock := &MockITenantHandler{ctrl: ctrl}
	mock.recorder = &MockITenantHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITenantHandler) EXPECT() *MockITenantHandlerMockRecorder {
	return m.recorder
}

// CreateTenant mocks base method.
func (m *MockITenantHandler) CreateTenant(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockITenantHandlerMockRecorder) CreateTenant(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockITenantHandler)(nil).CreateTenant), c)
}
